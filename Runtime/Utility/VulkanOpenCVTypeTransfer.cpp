#include "VulkanOpenCVTypeTransfer.hpp"
#include <vulkan/vk_enum_string_helper.h>

const std::unordered_map<std::string, AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::PerChannelValueTypeIndex> AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_numericFormatStringToPerChannelValueTypeIndexMap
{
	{ "UNORM", UNVALID_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "SNORM", SIGNED_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "USCALED", UNVALID_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "SSCALED", SIGNED_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "UINT", UNVALID_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "SINT", SIGNED_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "SRGB", UNVALID_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "UFLOAT", UNVALID_PER_CHANNEL_VALUE_TYPE_INDEX },
	{ "SFLOAT", FLOAT_PER_CHANNEL_VALUE_TYPE_INDEX }
};

const int AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_perChannelBitsIndexAndPerChannelValueTypeIndexToPerChannelValueTypeMap[3][3]
{
	CV_8S, CV_8U, -1, 
	CV_16S, CV_16U, CV_16F,
	CV_32S, -1, CV_32F
};

static std::unordered_map<std::string, VkFormat> BuildVkFormatStringToEnumMap()
{
	std::unordered_map<std::string, VkFormat> target{};

	const std::vector<uint32_t> VK_FORMAT_ENUM_FIRST_INDEX_GROUP{0, 1000156000, 1000330000, 1000340000, 1000066000, 1000054000, 1000464000};
	const std::vector<uint32_t> VK_FORMAT_ENUM_LAST_INDEX_GROUP{184, 1000156033, 1000330003, 1000340001, 1000066013, 1000054007, 1000464000};

	const auto&& GROUP_COUNT = VK_FORMAT_ENUM_FIRST_INDEX_GROUP.size();

	for (uint32_t groupIndex = 0; groupIndex < GROUP_COUNT; groupIndex++)
	{
		for (uint32_t formatIndex = VK_FORMAT_ENUM_FIRST_INDEX_GROUP[groupIndex]; formatIndex <= VK_FORMAT_ENUM_LAST_INDEX_GROUP[groupIndex]; formatIndex++)
		{
			VkFormat format = VkFormat(formatIndex);
			std::string formatString = string_VkFormat(format);
			target[formatString] = format;
		}
	}

	return target;
}
const std::unordered_map<std::string, VkFormat> AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_vkFormatStringToVkFormatMap
{ 
	BuildVkFormatStringToEnumMap() 
};

const std::unordered_map<std::string, VkImageUsageFlagBits> AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_vkImageUsageFlagBitsStringToVkImageUsageFlagBitsMap
{
	{ "VK_IMAGE_USAGE_TRANSFER_SRC_BIT", VK_IMAGE_USAGE_TRANSFER_SRC_BIT },
	{ "VK_IMAGE_USAGE_TRANSFER_DST_BIT", VK_IMAGE_USAGE_TRANSFER_DST_BIT },
	{ "VK_IMAGE_USAGE_SAMPLED_BIT", VK_IMAGE_USAGE_SAMPLED_BIT },
	{ "VK_IMAGE_USAGE_STORAGE_BIT", VK_IMAGE_USAGE_STORAGE_BIT },
	{ "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT", VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT },
	{ "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT", VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT },
	{ "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT", VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT },
	{ "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT", VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT },
};

const std::unordered_map<std::string, VkMemoryPropertyFlagBits> AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_vkMemoryPropertyFlagBitsStringToVkMemoryPropertyFlagBitsMap
{ 
	{ "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT", VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT },
	{ "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT", VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT },
	{ "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT", VK_MEMORY_PROPERTY_HOST_COHERENT_BIT },
	{ "VK_MEMORY_PROPERTY_HOST_CACHED_BIT", VK_MEMORY_PROPERTY_HOST_CACHED_BIT },
	{ "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT", VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT },
	{ "VK_MEMORY_PROPERTY_PROTECTED_BIT", VK_MEMORY_PROPERTY_PROTECTED_BIT },
	{ "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD", VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD },
	{ "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD", VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD },
	{ "VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV", VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV }
};
const std::unordered_map<std::string, VkImageLayout> AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_vkImageLayoutStringToVkImageLayoutMap
{
	{ "VK_IMAGE_LAYOUT_UNDEFINED", VK_IMAGE_LAYOUT_UNDEFINED },
	{ "VK_IMAGE_LAYOUT_GENERAL", VK_IMAGE_LAYOUT_GENERAL },
	{ "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL", VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL", VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL", VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_PREINITIALIZED", VK_IMAGE_LAYOUT_PREINITIALIZED },
	{ "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL", VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL", VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL },
	{ "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR", VK_IMAGE_LAYOUT_PRESENT_SRC_KHR },
	{ "VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR", VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR },
	{ "VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR", VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR },
	{ "VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR", VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR },
	{ "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR", VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR },
	{ "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT", VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT },
	{ "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR", VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR }
};
const std::unordered_map<std::string, VkImageAspectFlagBits> AirEngine::Runtime::Utility::VulkanOpenCVTypeTransfer::_vkImageAspectFlagBitsStringToVkImageAspectFlagBitsMap
{
	{ "VK_IMAGE_ASPECT_COLOR_BIT", VK_IMAGE_ASPECT_COLOR_BIT },
	{ "VK_IMAGE_ASPECT_DEPTH_BIT", VK_IMAGE_ASPECT_DEPTH_BIT },
	{ "VK_IMAGE_ASPECT_STENCIL_BIT", VK_IMAGE_ASPECT_STENCIL_BIT },
	{ "VK_IMAGE_ASPECT_METADATA_BIT", VK_IMAGE_ASPECT_METADATA_BIT },
	{ "VK_IMAGE_ASPECT_PLANE_0_BIT", VK_IMAGE_ASPECT_PLANE_0_BIT },
	{ "VK_IMAGE_ASPECT_PLANE_1_BIT", VK_IMAGE_ASPECT_PLANE_1_BIT },
	{ "VK_IMAGE_ASPECT_PLANE_2_BIT", VK_IMAGE_ASPECT_PLANE_2_BIT },
	{ "VK_IMAGE_ASPECT_NONE", VK_IMAGE_ASPECT_NONE },
	{ "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT", VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT },
	{ "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT", VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT },
	{ "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT", VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT },
	{ "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT", VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT },
	{ "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR", VK_IMAGE_ASPECT_PLANE_0_BIT_KHR },
	{ "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR", VK_IMAGE_ASPECT_PLANE_1_BIT_KHR },
	{ "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR", VK_IMAGE_ASPECT_PLANE_2_BIT_KHR },
	{ "VK_IMAGE_ASPECT_NONE_KHR", VK_IMAGE_ASPECT_NONE_KHR },
};
