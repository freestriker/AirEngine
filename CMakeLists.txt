cmake_minimum_required (VERSION 3.18)

if (POLICY CMP0091)
  cmake_policy(SET CMP0091 NEW)
endif (POLICY CMP0091)

set(CMAKE_TOOLCHAIN_FILE $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake)
set(VCPKG_TARGET_TRIPLET x64-windows-static)

function(GROUP_FILES FILE_PATHS)
  foreach(FILE_PATH ${FILE_PATHS}) 
    get_filename_component(ABSOLUTE_FILE_PATH "${FILE_PATH}" ABSOLUTE)
    get_filename_component(ABSOLUTE_FILE_DIRECTORY_PATH "${ABSOLUTE_FILE_PATH}" DIRECTORY)
    string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "" GROUP "${ABSOLUTE_FILE_DIRECTORY_PATH}")
    string(REPLACE "/" "\\" GROUP "${FILE_GROUP}")
    source_group("${FILE_GROUP}" FILES "${FILE_PATH}")
  endforeach()
endfunction()

function(GROUP_FILES_BY_DIRECTORY FILE_PATHS DIRECTORY_PATH)
  foreach(FILE_PATH ${FILE_PATHS}) 
    get_filename_component(ABSOLUTE_FILE_PATH "${FILE_PATH}" ABSOLUTE)
    get_filename_component(ABSOLUTE_FILE_DIRECTORY_PATH "${ABSOLUTE_FILE_PATH}" DIRECTORY)
    get_filename_component(ABSOLUTE_DIRECTORY_PATH "${DIRECTORY_PATH}" ABSOLUTE)
    string(REPLACE "${ABSOLUTE_DIRECTORY_PATH}" "" FILE_GROUP "${ABSOLUTE_FILE_DIRECTORY_PATH}")
    string(REPLACE "/" "\\" FILE_GROUP "${FILE_GROUP}")
    source_group("${FILE_GROUP}" FILES "${FILE_PATH}")
  endforeach()
endfunction()

function(FIND_SOURCE_FILE_PATHS SOURCE_DIRECTORY_PATH RESULT_SOURCE_FILE_PATHS)
  file(GLOB_RECURSE ALL_HEADER_FILE_PATHS "${SOURCE_DIRECTORY_PATH}/*.hpp")
  file(GLOB_RECURSE ALL_SOURCE_FILE_PATHS "${SOURCE_DIRECTORY_PATH}/*.cpp")
  set(RESULT_SOURCE_FILE_PATHS "${ALL_HEADER_FILE_PATHS}" "${ALL_SOURCE_FILE_PATHS}")
endfunction()

function(SET_PROJECT_SETTINGS)
  set(CMAKE_CXX_STANDARD 20)

  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:CONSOLE")

  add_definitions(-DNOMINMAX)
  add_definitions(-DVULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)
endfunction()

set(AIR_ENGINE_DIRECTORY_PATH "${CMAKE_SOURCE_DIR}")
set(RUNTIME_DIRECTORY_PATH "${AIR_ENGINE_DIRECTORY_PATH}/Runtime")

project(AirEngine)

add_subdirectory (Runtime)
add_subdirectory (Demo)